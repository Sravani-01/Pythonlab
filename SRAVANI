{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMLgS/hqHAfV0G3hDVubErO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sravani-01/Pythonlab/blob/main/SRAVANI\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        },
        "id": "6OrmrGNglV_a",
        "outputId": "ee9c7cab-9c12-409a-9b14-e1a50c334d85"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-73416c2a5320>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    from keras.preprocessing.image\u001b[0m\n\u001b[0m                                  ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "import keras\n",
        "from keras.preprocessing.image\n",
        "import ImageDataGenerator, img_to_array, load_img from keras.applications.vgg19\n",
        "import VGG19, preprocess_input, decode_predictions\n",
        "train_datagen = ImageDataGenerator(zoom_range = 0.5, shear_range = 0.3, horizontal_flip=\n",
        "True, preprocessing_function = preprocess_input)\n",
        "val_datagen = ImageDataGenerator(preprocessing_function= preprocess_input )\n",
        "train=train_datagen.flow_from_directory(directory=\"/content/drive/MyDrive/Dataset/train\",t\n",
        "arget_size=(256,256),batch_size=32)\n",
        "val=val_datagen.flow_from_directory(directory=\"/content/drive/MyDrive/Dataset/val\",target_\n",
        "size=(256,256),batch_size=32)\n",
        "def plotImage(img_arr, lable):\n",
        "for im , l in zip(img_arr , lable):\n",
        "plt.figure(figsize=(5,5))\n",
        "plt.imshow(im)\n",
        "plt.show()\n",
        "plotImage(t_img[:3], lable[:3])\n",
        "from keras.layers import Dense, Flatten\n",
        "from keras.models import Model\n",
        "from keras.applications.vgg19 import VGG19, preprocess_input\n",
        "import keras\n",
        "base_model = VGG19(input_shape=(256,256,3), include_top = False)\n",
        "for layer in base_model.layers:\n",
        "layer.trainable = False\n",
        "base_model.summary()\n",
        "X = Flatten()(base_model.output)\n",
        "X = Dense(units = 10, activation ='softmax')(X)\n",
        "model = Model(base_model.input, X)\n",
        "model.summary()\n",
        "model.compile(optimizer= 'adam'\n",
        "loss= keras.losses.categorical_crossentropy, metrics=['accuracy'])\n",
        "from keras.callbacks import ModelCheckpoint, EarlyStopping\n",
        "es = EarlyStopping(monitor = 'val_accuracy', min_delta= 0.01, patience=3 , verbose=1)\n",
        "mc = ModelCheckpoint(filepath=\"best_model.h5\",\n",
        "monitor = 'val_accuracy',\n",
        "min_delta= 0.01, patience=3 ,\n",
        "verbose=1,\n",
        "save_best_only= True)\n",
        "his = model.fit(x= train,steps_per_epoch=1,\n",
        "epochs = 12,\n",
        "verbose= 1,\n",
        "callbacks= cb,\n",
        "validation_data=val,\n",
        "validation_steps=1)\n",
        "h = his.history\n",
        "h.keys()\n",
        "plt.plot(h['accuracy'])\n",
        "plt.plot(h['val_accuracy'], c = \"red\")\n",
        "plt.title(\"acc vs v.acc\")\n",
        "plt.show()\n",
        "plt.plot(h['loss'])\n",
        "plt.plot(h['val_loss'], c = \"red\")\n",
        "plt.title(\"loss vs v.loss\")\n",
        "plt.show()\n",
        "from keras.models import load_model\n",
        "model = load_model(\"/content/best_model.h5\")\n",
        "acc = model.evaluate_generator(val)[1]\n",
        "print(f\"The accuracy of given model is = {acc*100}%\")\n",
        "ref = dict(zip(list(train.class_indices.values()),list(train.class_indices.keys()) ) )\n",
        "def prediction(path):\n",
        "img = load_img(path, target_size =(256,256))\n",
        "i = img_to_array(img)\n",
        "im = preprocess_input(i)\n",
        "img = np.expand_dims(im , axis= 0)\n",
        "pred = np.argmax(model.predict(img) )\n",
        "print(f\" the disease is { ref[pred] }\")\n",
        "path = \"/content/drive/MyDrive/Dataset/test/Tomato Septoria_leaf_spot (1).JPG\"\n",
        "prediction (path)\n"
      ]
    }
  ]
}